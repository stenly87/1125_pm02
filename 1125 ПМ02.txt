ПМ02 Ревьюирование программных модулей
профессиональный модуль

Жизненный цикл ПО начинается с некоторой идеи или задачи,
завершается при потере необходимости в данном ПО

Примерные стадии ЖЦ:
1. Идея
2. Проектирование - 60% времени разработки
3. Разработка
4. Тестирование
5. Внедрение
6. Эксплуатация
7. Завершение эксплуатации и жизни ПО

Виды ЖЦ ПО:
1. Водопадный (Каскадный) ЖЦ
2. Водопадный (Каскадный) ЖЦ c возвратом
3. Спиральный (Циклический) ЖЦ
4. V-образный - Rational roze

Спиральный (Циклический):
Предполагает, что на каждом витке создается новая версия
программного обеспечения (это может быть обновление либо
переделка ПО с нуля). Цикл может продолжаться бесконечно.

На этапе проектирования выясняется следующее:
1) Требования заказчика (требования к функционалу, интерфейсу, виду и хранению данных, отказоустойчивости,
запрещенный функционал)
2) Сбор требований происходит с разных пользователей системы (директор, менеджер, конечные пользователи)
3) Разработка макета или тестового проекта - помогает
выявить проблемы в проектировании, оценить сложность
разработки, внести коррективы в требования, позволяют
пользователям понять, чего ждать от ПО
4) Итогом этапа проектирования обычно является несколько 
документов, в которых подробно расписаны все требования,
примеры алгоритмов (или точные реализации), схемы, модули
Эти документы должны быть подписаны заказчиком
Техническое задание

Существует много видов ПО:
Поисковые информационные системы (ИС, АИС) (поиск по некоторой базе знаний)
Библиотечные ис (хранение данных)
Вычислительные ис (математические вычисления, исследования)
Развлекательное ПО
Операционные системы и прикладное ПО (драйвера и другие низкоуровневые приложения)
Системы разработки

Автоматические ис - нет контролера (персонала)
Автоматизированные ис - есть управляющий

информационная система предназначения для хранения, обработки, ввода/вывода данных с определенной целью.

информационная система состоит из некоторого ПО, работающего на некоторой ОС, из оборудования и персонала, который управляет и обслуживает оборудование и ПО.

Основными частями ПО обычно являются:
1) система ввода (способов ввода данных может быть много:
от ввода вручную с помощью интерфейса и импорта файлов до отслеживания датчиков и/или событий ОС)
2) система вывода информации (интерфейс пользователя также может быть довольно разным - может предполагать наличие кнопок/списков и тп, может быть в виде api-сервиса,
или консоли/файла с логом и тп)
3) система хранения данных (субд, файлы, сети и тп)
4) ряд систем обработки данных
5) система логирования
6) система резервирования

ГИТ (git) - протокол, по которому работает система контроля изменений в проекте. Система контроля версий.
Система контроля версий нужна для нескольких вещей:
1) сохранение работы в любой момент времени
2) возможность возвращения к разным сохраненным моментам 
работы над проектом
3) за счет пункта 2, мы не боимся вносить изменения в проект (в код), поскольку всегда можно вернуться в стабильное состояние (на сохраненный коммит)
4) использование гит позволяет работать над проектом в команде

Установка и настройка git
1) Скачиваем и устанавливаем приложение с сайта https://git-scm.com/
2) Здесь документация к командам: https://git-scm.com/docs

Репозиторий - это директория, изменения в которой отслеживаются системой git
В репозитории создается скрытая папка .git, в которой фиксируются все локальные коммиты. Это локальный репозиторий. Если его удалить, то история потеряется, директория больше не будет отслеживаться

Каждая зафиксированная точка в репозитории называется коммитом. Это точка, которая сохраняет состояние всех отслеживаемых файлов в директории. Для создание следующей точки необходимо внести изменения в файлы.
В репозитории можно настроить игнорирование некоторых файлов и/или вложенных директорий, для того, чтобы не отслеживать изменения в них, за это отвечает файл .gitignore в корне директории.

Сразу после установки следует настроить пару параметров в git
Следует обязательно задать имя (User Name) и почту (Email Address)
Эта информация используется при создании коммита. Получается, что все изменения подписываются их авторами.
Во время инсталяции важно поменять хотя бы текстовый редактор, остальное станет ясным по мере работы с git

Создание репозитория производится командой git init в консоли
Посмотреть, есть ли изменения в папке можно командой git status
Для добавления изменений в коммит используется команда git add
команда с точкой (git add .) позволяет добавить в коммит все изменения, которые есть, сразу
После того, как набор файлов для коммита определен
Можно создать сам коммит, при этом обязательно к нему нужно добавить
комментарий (либо пишем git commit, либо git commit -m "комментарий")
После этого коммит будет создан в локальном репозитории, он будет отображаться в истории и к нему можно будет вернуться (откатить изменения во всех файлах репозитория к этому состоянию)